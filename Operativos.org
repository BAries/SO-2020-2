* Sistemas Operativos 2020-2 (Ayudantía)
** Formato de evaluación
*** Tareas
Las tareas se dejarán como issues en el [[https://github.com/camachojua/SO-2020-2][repositorio]], además estarán
presentes en la sección /tareas/ de cada uno de los archivos =.org=
que se suben al mismo.

*ANTES* de envíar la tarea se deben realizar los siguientes pasos:

1. Crear una cuenta [[https://github.com][github]] si es que no tienen.
2. Hacer un [[https://guides.github.com/activities/forking/][fork]] del repositorio.
3. Crear un directorio llamado =No. de cuenta= con su número de cuenta
   bajo la carpeta =tareas=.
4. Crear un directorio llamado =#issue= (número de issue asignado)
   dentro del directorio =No. de cuenta= que contendrá la solución a
   su tarea.
5. Resolver la tarea correspondiente (ver la sección de [[https://github.com/camachojua/SO-2020-2/issues][issues]] del
   repositorio).
6. Resolver la tarea.
7. Hacer un [[https://guides.github.com/introduction/flow/][pull]] del repositorio original (=Upstream=) para que =HEAD=
   apunte a =orign/master=.
   1. Si hubo un cambio en el repositorio mientras resolvían su tarea
      deben resolver los conflictos de su lado (su fork privado) y
      como regla general upstream tiene preferencia sobre sus cambios.
8. Realizar un [[https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests][pull-request]] indicando el issue que están resolviendo.
9. Esperar calificación del ayudante.
10. El ayudante hace el merge de su tarea.
*** Participaciones
Se tomará en cuenta la iniciativa personal y grupal al momento de
asistir a la clase, recuerden que las participaciones pueden ser
intercambiadas por un 20% de la calificación final.
** Temario
*** Introducción
*** Modelo de ejecución de programas
*** Arquitectura general de los Sistemas Operativos
*** Modelos de control de acceso
*** Administración de procesos
*** Sistemas de archivos
** Primer clase
*** Teoría
**** ¿Dónde podemos encontrar una computadora?
Los componentes de procesamiento digital se pueden encontrar en todos
lados: relojes, sensores, actuadores, interfaces físicas de usuario,
luces, etc. Debido al bajo coste de fabricación de los chips es más
barato insertar una pequeña computadora que construir un dispositivo
mecánico que realice un acción (el costo es tan bajo que cuesta más
empaquetar un chip que crearlo).

Como hay muchas computadoras procesando información dentro de las
entidades físicas que construimos es necesario administrar ese
procesamiento y la información que se obtiene a partir de dichas
entidades de cómputo (es decir: tenemos muchos recursos de cómputo,
mucha información que administrar y demasiados programas que se
encuentran en ejecución) ¿Qué cosa puede salir mal?
***** ¿Cómo se ejecutan los programas?
Si me preguntaran en qué consiste un programa diría /formular acciones
de una manera sistemática y clara que hasta una computadora puede
hacerlo/, es un proceso que involucra dos pasos:

1. Entender el universo.
2. Explicárselo a un niño de tres años.

El primer punto implica que debes conocer lo que deseas programar: no
puedes escribir un shooter si no sabes física, la segunda tiene que
ver con la poca información que una computadora posee del mundo
exterior. Debido a esta falta de información se crearon un conjunto de
abstracciones que nos permiten interactuar con el sistema dependiendo
de nuestras necesidades.

#+begin_src plantuml :file arquitectura.png
  digraph overview {
    node [style=rounded]
    Physic [shape=box, label="Implementación física"]
    Logic [shape=box, label="Diseño lógico"]
    Hardware [shape=box, label="Hardware"]
    SO [shape=box, label="Sistema Operativo"]
    App [shape=box, label="Aplicaciones"]
    User [shape=box, label="Usuarios"]

    Physic -> Logic
    Logic -> Hardware
    Hardware -> SO
    SO -> App
    App -> User
  }
#+end_src

[[file:arquitectura.png]]

La implementación física está limitada por la tecnología de la época
en la que se manufacture el equipo de cómputo depende de los avances
físicos e ingenieriles que se tengan disponibles para poder hacer
realidad el diseño (piensen en la carrera por implementar
microprocesadores cuya longitud de transistor sea lo más [[https://www.techcenturion.com/7nm-10nm-14nm-fabrication][pequeña
posible]]), como extra cabe mencionar que el desarrollo físico de los
elementos de cómputo está íntimamente ligado a la [[eww:https://en.wikipedia.org/wiki/Microarchitecture][microarquitectura]],
la cual define los requerimentos que debe cumplir el sistema
físico. El diseño lógico consiste en crear una abstracción que permita
desarrollar software que controle la parte física (controladores de
dispositivos, implementación de protocolos de comunicación entre
componentes físicos, etc.) de tal manera que cualquier usuario de un
subsistema pueda comunicarse con él sin necesidad de conocer a fondo
todo el hardware.

Las distintas capas pueden comunicarse unas con otras a través de
*interfaces*, cada una con distintos privilegios a los recursos que se
encuentran en las capas adyacentes. Desde luego, mientras más bajemos
(de acuerdo a la figura anterior) mayor será la abstracción y muchos
más servicios se tienen disponibles para realizar acciones más
complejas de manera más rápida para el consumidor de dichos servicios.

*** Tarea
+ Clonar este repositorio.
+ Mandar correo al ayudante con las siguientes características:
  + Asunto =[SO-2020-2]=.
  + Nombre completo, número de cuenta y aspiraciones del curso.
  + ¿Por qué el costo de empaquetado de un chip de procesamiento es
    más alto que el de la creación del chip?
*** Para la siguiente semana
